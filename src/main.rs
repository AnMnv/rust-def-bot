// use chrono::{ Utc, Duration };
use teloxide::{ prelude::*, types::{ UserId, ChatId, ParseMode } };
use serde::Deserialize;
use std::fs::File;

extern crate rusqlite;

use rusqlite::NO_PARAMS;
use rusqlite::{ Connection, Result };
use std::collections::HashMap;

#[derive(Deserialize)]
struct Config {
    bot: BotConfig,
}

#[derive(Deserialize)]
struct BotConfig {
    token: String,
}

#[tokio::main]
async fn main() {
    let conn = Connection::open("cats.db")?;

    conn.execute(
        "create table if not exists cat_colors (
             id integer primary key,
             name text not null unique
         )",
        NO_PARAMS
    )?;

    // –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    let file = File::open("config.yaml").expect("Failed to open config file");
    let config: Config = serde_yaml::from_reader(file).expect("Failed to read config");

    // –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
    let bot = Bot::new(config.bot.token);

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–æ–≤ –∏ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤
    let allowed_chat_ids = vec![ChatId(-1002111558125)];
    let forbidden_words = vec![
        "/",
        "–ø–æ–∏—Å–∫–µ",
        "–≤–∏–¥–µ–æ",
        "invite",
        "–í–∏–¥–µ–æ",
        "–óa—Äa–±a—Ç—ã–≤a—é",
        "–∑a—Äa–±a—Ç—ã–≤a—é"
    ];

    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    teloxide::repl(bot, move |bot: Bot, msg: Message| {
        let allowed_chat_ids = allowed_chat_ids.clone();
        let forbidden_words = forbidden_words.clone();

        async move {
            if let Some(user) = msg.from() {
                println!("Chat ID: {}", msg.chat.id);

                if user.id != UserId(651726581) {
                    if allowed_chat_ids.contains(&msg.chat.id) {
                        match bot.get_chat(user.id).await {
                            Ok(chat) => {
                                let bio = chat.bio().unwrap_or_default();
                                let contains_forbidden_word = forbidden_words
                                    .iter()
                                    .any(|word| bio.contains(word));

                                if contains_forbidden_word {
                                    println!("User's bio contains forbidden words!");
                                    // –í–∞—à –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª—É—á–∞—è —Å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
                                    bot.delete_message(msg.chat.id, msg.id).await.unwrap();
                                    //bot.ban_chat_member(msg.chat.id, user.id).await.unwrap();
                                } else {
                                    println!("User's bio is clean.");
                                }
                            }
                            Err(err) => {
                                println!("Failed to get chat: {:?}", err);
                            }
                        }
                    } else {
                        println!("Message from non-allowed chat.");
                        bot
                            .send_message(
                                msg.chat.id,
                                "ü§° –±–æ—Ç–∞ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫, –Ω–∞–ø–∏—à–∏ –º–Ω–µ @anmnv"
                            )
                            .parse_mode(ParseMode::MarkdownV2).await?;
                    }
                } else {
                }
            }
            respond(())
        }
    }).await;
}
